// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: claim/claim.proto

package claim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClaimClient is the client API for Claim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClaimClient interface {
	GetProof(ctx context.Context, in *ProofRequest, opts ...grpc.CallOption) (*ProofResponse, error)
}

type claimClient struct {
	cc grpc.ClientConnInterface
}

func NewClaimClient(cc grpc.ClientConnInterface) ClaimClient {
	return &claimClient{cc}
}

func (c *claimClient) GetProof(ctx context.Context, in *ProofRequest, opts ...grpc.CallOption) (*ProofResponse, error) {
	out := new(ProofResponse)
	err := c.cc.Invoke(ctx, "/claim.Claim/getProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClaimServer is the server API for Claim service.
// All implementations must embed UnimplementedClaimServer
// for forward compatibility
type ClaimServer interface {
	GetProof(context.Context, *ProofRequest) (*ProofResponse, error)
	mustEmbedUnimplementedClaimServer()
}

// UnimplementedClaimServer must be embedded to have forward compatible implementations.
type UnimplementedClaimServer struct {
}

func (UnimplementedClaimServer) GetProof(context.Context, *ProofRequest) (*ProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}
func (UnimplementedClaimServer) mustEmbedUnimplementedClaimServer() {}

// UnsafeClaimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClaimServer will
// result in compilation errors.
type UnsafeClaimServer interface {
	mustEmbedUnimplementedClaimServer()
}

func RegisterClaimServer(s grpc.ServiceRegistrar, srv ClaimServer) {
	s.RegisterService(&Claim_ServiceDesc, srv)
}

func _Claim_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClaimServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/claim.Claim/getProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClaimServer).GetProof(ctx, req.(*ProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Claim_ServiceDesc is the grpc.ServiceDesc for Claim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Claim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "claim.Claim",
	HandlerType: (*ClaimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProof",
			Handler:    _Claim_GetProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "claim/claim.proto",
}
