// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"distributor/core/http/rpc/claim/ent/distributororder"
	"distributor/core/http/rpc/claim/ent/predicate"
	"distributor/core/http/rpc/claim/ent/schema"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// DistributorOrderUpdate is the builder for updating DistributorOrder entities.
type DistributorOrderUpdate struct {
	config
	hooks    []Hook
	mutation *DistributorOrderMutation
}

// Where appends a list predicates to the DistributorOrderUpdate builder.
func (dou *DistributorOrderUpdate) Where(ps ...predicate.DistributorOrder) *DistributorOrderUpdate {
	dou.mutation.Where(ps...)
	return dou
}

// SetOrderId sets the "orderId" field.
func (dou *DistributorOrderUpdate) SetOrderId(u uint32) *DistributorOrderUpdate {
	dou.mutation.ResetOrderId()
	dou.mutation.SetOrderId(u)
	return dou
}

// AddOrderId adds u to the "orderId" field.
func (dou *DistributorOrderUpdate) AddOrderId(u int32) *DistributorOrderUpdate {
	dou.mutation.AddOrderId(u)
	return dou
}

// SetBatchId sets the "batchId" field.
func (dou *DistributorOrderUpdate) SetBatchId(s string) *DistributorOrderUpdate {
	dou.mutation.SetBatchId(s)
	return dou
}

// SetProjectId sets the "projectId" field.
func (dou *DistributorOrderUpdate) SetProjectId(s string) *DistributorOrderUpdate {
	dou.mutation.SetProjectId(s)
	return dou
}

// SetAccount sets the "account" field.
func (dou *DistributorOrderUpdate) SetAccount(s string) *DistributorOrderUpdate {
	dou.mutation.SetAccount(s)
	return dou
}

// SetAmount sets the "amount" field.
func (dou *DistributorOrderUpdate) SetAmount(si *schema.BigInt) *DistributorOrderUpdate {
	dou.mutation.SetAmount(si)
	return dou
}

// SetIndex sets the "index" field.
func (dou *DistributorOrderUpdate) SetIndex(i int) *DistributorOrderUpdate {
	dou.mutation.ResetIndex()
	dou.mutation.SetIndex(i)
	return dou
}

// AddIndex adds i to the "index" field.
func (dou *DistributorOrderUpdate) AddIndex(i int) *DistributorOrderUpdate {
	dou.mutation.AddIndex(i)
	return dou
}

// SetCreateAt sets the "createAt" field.
func (dou *DistributorOrderUpdate) SetCreateAt(t time.Time) *DistributorOrderUpdate {
	dou.mutation.SetCreateAt(t)
	return dou
}

// SetPTaskId sets the "pTaskId" field.
func (dou *DistributorOrderUpdate) SetPTaskId(s string) *DistributorOrderUpdate {
	dou.mutation.SetPTaskId(s)
	return dou
}

// SetProof sets the "proof" field.
func (dou *DistributorOrderUpdate) SetProof(s []string) *DistributorOrderUpdate {
	dou.mutation.SetProof(s)
	return dou
}

// AppendProof appends s to the "proof" field.
func (dou *DistributorOrderUpdate) AppendProof(s []string) *DistributorOrderUpdate {
	dou.mutation.AppendProof(s)
	return dou
}

// Mutation returns the DistributorOrderMutation object of the builder.
func (dou *DistributorOrderUpdate) Mutation() *DistributorOrderMutation {
	return dou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dou *DistributorOrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dou.sqlSave, dou.mutation, dou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dou *DistributorOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := dou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dou *DistributorOrderUpdate) Exec(ctx context.Context) error {
	_, err := dou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dou *DistributorOrderUpdate) ExecX(ctx context.Context) {
	if err := dou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dou *DistributorOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(distributororder.Table, distributororder.Columns, sqlgraph.NewFieldSpec(distributororder.FieldID, field.TypeInt))
	if ps := dou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dou.mutation.OrderId(); ok {
		_spec.SetField(distributororder.FieldOrderId, field.TypeUint32, value)
	}
	if value, ok := dou.mutation.AddedOrderId(); ok {
		_spec.AddField(distributororder.FieldOrderId, field.TypeUint32, value)
	}
	if value, ok := dou.mutation.BatchId(); ok {
		_spec.SetField(distributororder.FieldBatchId, field.TypeString, value)
	}
	if value, ok := dou.mutation.ProjectId(); ok {
		_spec.SetField(distributororder.FieldProjectId, field.TypeString, value)
	}
	if value, ok := dou.mutation.Account(); ok {
		_spec.SetField(distributororder.FieldAccount, field.TypeString, value)
	}
	if value, ok := dou.mutation.Amount(); ok {
		_spec.SetField(distributororder.FieldAmount, field.TypeInt, value)
	}
	if value, ok := dou.mutation.Index(); ok {
		_spec.SetField(distributororder.FieldIndex, field.TypeInt, value)
	}
	if value, ok := dou.mutation.AddedIndex(); ok {
		_spec.AddField(distributororder.FieldIndex, field.TypeInt, value)
	}
	if value, ok := dou.mutation.CreateAt(); ok {
		_spec.SetField(distributororder.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := dou.mutation.PTaskId(); ok {
		_spec.SetField(distributororder.FieldPTaskId, field.TypeString, value)
	}
	if value, ok := dou.mutation.Proof(); ok {
		_spec.SetField(distributororder.FieldProof, field.TypeJSON, value)
	}
	if value, ok := dou.mutation.AppendedProof(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, distributororder.FieldProof, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{distributororder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dou.mutation.done = true
	return n, nil
}

// DistributorOrderUpdateOne is the builder for updating a single DistributorOrder entity.
type DistributorOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DistributorOrderMutation
}

// SetOrderId sets the "orderId" field.
func (douo *DistributorOrderUpdateOne) SetOrderId(u uint32) *DistributorOrderUpdateOne {
	douo.mutation.ResetOrderId()
	douo.mutation.SetOrderId(u)
	return douo
}

// AddOrderId adds u to the "orderId" field.
func (douo *DistributorOrderUpdateOne) AddOrderId(u int32) *DistributorOrderUpdateOne {
	douo.mutation.AddOrderId(u)
	return douo
}

// SetBatchId sets the "batchId" field.
func (douo *DistributorOrderUpdateOne) SetBatchId(s string) *DistributorOrderUpdateOne {
	douo.mutation.SetBatchId(s)
	return douo
}

// SetProjectId sets the "projectId" field.
func (douo *DistributorOrderUpdateOne) SetProjectId(s string) *DistributorOrderUpdateOne {
	douo.mutation.SetProjectId(s)
	return douo
}

// SetAccount sets the "account" field.
func (douo *DistributorOrderUpdateOne) SetAccount(s string) *DistributorOrderUpdateOne {
	douo.mutation.SetAccount(s)
	return douo
}

// SetAmount sets the "amount" field.
func (douo *DistributorOrderUpdateOne) SetAmount(si *schema.BigInt) *DistributorOrderUpdateOne {
	douo.mutation.SetAmount(si)
	return douo
}

// SetIndex sets the "index" field.
func (douo *DistributorOrderUpdateOne) SetIndex(i int) *DistributorOrderUpdateOne {
	douo.mutation.ResetIndex()
	douo.mutation.SetIndex(i)
	return douo
}

// AddIndex adds i to the "index" field.
func (douo *DistributorOrderUpdateOne) AddIndex(i int) *DistributorOrderUpdateOne {
	douo.mutation.AddIndex(i)
	return douo
}

// SetCreateAt sets the "createAt" field.
func (douo *DistributorOrderUpdateOne) SetCreateAt(t time.Time) *DistributorOrderUpdateOne {
	douo.mutation.SetCreateAt(t)
	return douo
}

// SetPTaskId sets the "pTaskId" field.
func (douo *DistributorOrderUpdateOne) SetPTaskId(s string) *DistributorOrderUpdateOne {
	douo.mutation.SetPTaskId(s)
	return douo
}

// SetProof sets the "proof" field.
func (douo *DistributorOrderUpdateOne) SetProof(s []string) *DistributorOrderUpdateOne {
	douo.mutation.SetProof(s)
	return douo
}

// AppendProof appends s to the "proof" field.
func (douo *DistributorOrderUpdateOne) AppendProof(s []string) *DistributorOrderUpdateOne {
	douo.mutation.AppendProof(s)
	return douo
}

// Mutation returns the DistributorOrderMutation object of the builder.
func (douo *DistributorOrderUpdateOne) Mutation() *DistributorOrderMutation {
	return douo.mutation
}

// Where appends a list predicates to the DistributorOrderUpdate builder.
func (douo *DistributorOrderUpdateOne) Where(ps ...predicate.DistributorOrder) *DistributorOrderUpdateOne {
	douo.mutation.Where(ps...)
	return douo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (douo *DistributorOrderUpdateOne) Select(field string, fields ...string) *DistributorOrderUpdateOne {
	douo.fields = append([]string{field}, fields...)
	return douo
}

// Save executes the query and returns the updated DistributorOrder entity.
func (douo *DistributorOrderUpdateOne) Save(ctx context.Context) (*DistributorOrder, error) {
	return withHooks(ctx, douo.sqlSave, douo.mutation, douo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (douo *DistributorOrderUpdateOne) SaveX(ctx context.Context) *DistributorOrder {
	node, err := douo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (douo *DistributorOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := douo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (douo *DistributorOrderUpdateOne) ExecX(ctx context.Context) {
	if err := douo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (douo *DistributorOrderUpdateOne) sqlSave(ctx context.Context) (_node *DistributorOrder, err error) {
	_spec := sqlgraph.NewUpdateSpec(distributororder.Table, distributororder.Columns, sqlgraph.NewFieldSpec(distributororder.FieldID, field.TypeInt))
	id, ok := douo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DistributorOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := douo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, distributororder.FieldID)
		for _, f := range fields {
			if !distributororder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != distributororder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := douo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := douo.mutation.OrderId(); ok {
		_spec.SetField(distributororder.FieldOrderId, field.TypeUint32, value)
	}
	if value, ok := douo.mutation.AddedOrderId(); ok {
		_spec.AddField(distributororder.FieldOrderId, field.TypeUint32, value)
	}
	if value, ok := douo.mutation.BatchId(); ok {
		_spec.SetField(distributororder.FieldBatchId, field.TypeString, value)
	}
	if value, ok := douo.mutation.ProjectId(); ok {
		_spec.SetField(distributororder.FieldProjectId, field.TypeString, value)
	}
	if value, ok := douo.mutation.Account(); ok {
		_spec.SetField(distributororder.FieldAccount, field.TypeString, value)
	}
	if value, ok := douo.mutation.Amount(); ok {
		_spec.SetField(distributororder.FieldAmount, field.TypeInt, value)
	}
	if value, ok := douo.mutation.Index(); ok {
		_spec.SetField(distributororder.FieldIndex, field.TypeInt, value)
	}
	if value, ok := douo.mutation.AddedIndex(); ok {
		_spec.AddField(distributororder.FieldIndex, field.TypeInt, value)
	}
	if value, ok := douo.mutation.CreateAt(); ok {
		_spec.SetField(distributororder.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := douo.mutation.PTaskId(); ok {
		_spec.SetField(distributororder.FieldPTaskId, field.TypeString, value)
	}
	if value, ok := douo.mutation.Proof(); ok {
		_spec.SetField(distributororder.FieldProof, field.TypeJSON, value)
	}
	if value, ok := douo.mutation.AppendedProof(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, distributororder.FieldProof, value)
		})
	}
	_node = &DistributorOrder{config: douo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, douo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{distributororder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	douo.mutation.done = true
	return _node, nil
}
