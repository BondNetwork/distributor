// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"distributor/core/http/rpc/claim/ent/distributororder"
	"distributor/core/http/rpc/claim/ent/schema"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DistributorOrderCreate is the builder for creating a DistributorOrder entity.
type DistributorOrderCreate struct {
	config
	mutation *DistributorOrderMutation
	hooks    []Hook
}

// SetOrderId sets the "orderId" field.
func (doc *DistributorOrderCreate) SetOrderId(u uint32) *DistributorOrderCreate {
	doc.mutation.SetOrderId(u)
	return doc
}

// SetBatchId sets the "batchId" field.
func (doc *DistributorOrderCreate) SetBatchId(s string) *DistributorOrderCreate {
	doc.mutation.SetBatchId(s)
	return doc
}

// SetProjectId sets the "projectId" field.
func (doc *DistributorOrderCreate) SetProjectId(s string) *DistributorOrderCreate {
	doc.mutation.SetProjectId(s)
	return doc
}

// SetAccount sets the "account" field.
func (doc *DistributorOrderCreate) SetAccount(s string) *DistributorOrderCreate {
	doc.mutation.SetAccount(s)
	return doc
}

// SetAmount sets the "amount" field.
func (doc *DistributorOrderCreate) SetAmount(si *schema.BigInt) *DistributorOrderCreate {
	doc.mutation.SetAmount(si)
	return doc
}

// SetIndex sets the "index" field.
func (doc *DistributorOrderCreate) SetIndex(i int) *DistributorOrderCreate {
	doc.mutation.SetIndex(i)
	return doc
}

// SetCreateAt sets the "createAt" field.
func (doc *DistributorOrderCreate) SetCreateAt(t time.Time) *DistributorOrderCreate {
	doc.mutation.SetCreateAt(t)
	return doc
}

// SetPTaskId sets the "pTaskId" field.
func (doc *DistributorOrderCreate) SetPTaskId(s string) *DistributorOrderCreate {
	doc.mutation.SetPTaskId(s)
	return doc
}

// SetProof sets the "proof" field.
func (doc *DistributorOrderCreate) SetProof(s []string) *DistributorOrderCreate {
	doc.mutation.SetProof(s)
	return doc
}

// Mutation returns the DistributorOrderMutation object of the builder.
func (doc *DistributorOrderCreate) Mutation() *DistributorOrderMutation {
	return doc.mutation
}

// Save creates the DistributorOrder in the database.
func (doc *DistributorOrderCreate) Save(ctx context.Context) (*DistributorOrder, error) {
	return withHooks(ctx, doc.sqlSave, doc.mutation, doc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (doc *DistributorOrderCreate) SaveX(ctx context.Context) *DistributorOrder {
	v, err := doc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (doc *DistributorOrderCreate) Exec(ctx context.Context) error {
	_, err := doc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doc *DistributorOrderCreate) ExecX(ctx context.Context) {
	if err := doc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doc *DistributorOrderCreate) check() error {
	if _, ok := doc.mutation.OrderId(); !ok {
		return &ValidationError{Name: "orderId", err: errors.New(`ent: missing required field "DistributorOrder.orderId"`)}
	}
	if _, ok := doc.mutation.BatchId(); !ok {
		return &ValidationError{Name: "batchId", err: errors.New(`ent: missing required field "DistributorOrder.batchId"`)}
	}
	if _, ok := doc.mutation.ProjectId(); !ok {
		return &ValidationError{Name: "projectId", err: errors.New(`ent: missing required field "DistributorOrder.projectId"`)}
	}
	if _, ok := doc.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "DistributorOrder.account"`)}
	}
	if _, ok := doc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "DistributorOrder.amount"`)}
	}
	if _, ok := doc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "DistributorOrder.index"`)}
	}
	if _, ok := doc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "createAt", err: errors.New(`ent: missing required field "DistributorOrder.createAt"`)}
	}
	if _, ok := doc.mutation.PTaskId(); !ok {
		return &ValidationError{Name: "pTaskId", err: errors.New(`ent: missing required field "DistributorOrder.pTaskId"`)}
	}
	if _, ok := doc.mutation.Proof(); !ok {
		return &ValidationError{Name: "proof", err: errors.New(`ent: missing required field "DistributorOrder.proof"`)}
	}
	return nil
}

func (doc *DistributorOrderCreate) sqlSave(ctx context.Context) (*DistributorOrder, error) {
	if err := doc.check(); err != nil {
		return nil, err
	}
	_node, _spec := doc.createSpec()
	if err := sqlgraph.CreateNode(ctx, doc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	doc.mutation.id = &_node.ID
	doc.mutation.done = true
	return _node, nil
}

func (doc *DistributorOrderCreate) createSpec() (*DistributorOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &DistributorOrder{config: doc.config}
		_spec = sqlgraph.NewCreateSpec(distributororder.Table, sqlgraph.NewFieldSpec(distributororder.FieldID, field.TypeInt))
	)
	if value, ok := doc.mutation.OrderId(); ok {
		_spec.SetField(distributororder.FieldOrderId, field.TypeUint32, value)
		_node.OrderId = value
	}
	if value, ok := doc.mutation.BatchId(); ok {
		_spec.SetField(distributororder.FieldBatchId, field.TypeString, value)
		_node.BatchId = value
	}
	if value, ok := doc.mutation.ProjectId(); ok {
		_spec.SetField(distributororder.FieldProjectId, field.TypeString, value)
		_node.ProjectId = value
	}
	if value, ok := doc.mutation.Account(); ok {
		_spec.SetField(distributororder.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if value, ok := doc.mutation.Amount(); ok {
		_spec.SetField(distributororder.FieldAmount, field.TypeInt, value)
		_node.Amount = value
	}
	if value, ok := doc.mutation.Index(); ok {
		_spec.SetField(distributororder.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := doc.mutation.CreateAt(); ok {
		_spec.SetField(distributororder.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := doc.mutation.PTaskId(); ok {
		_spec.SetField(distributororder.FieldPTaskId, field.TypeString, value)
		_node.PTaskId = value
	}
	if value, ok := doc.mutation.Proof(); ok {
		_spec.SetField(distributororder.FieldProof, field.TypeJSON, value)
		_node.Proof = value
	}
	return _node, _spec
}

// DistributorOrderCreateBulk is the builder for creating many DistributorOrder entities in bulk.
type DistributorOrderCreateBulk struct {
	config
	builders []*DistributorOrderCreate
}

// Save creates the DistributorOrder entities in the database.
func (docb *DistributorOrderCreateBulk) Save(ctx context.Context) ([]*DistributorOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(docb.builders))
	nodes := make([]*DistributorOrder, len(docb.builders))
	mutators := make([]Mutator, len(docb.builders))
	for i := range docb.builders {
		func(i int, root context.Context) {
			builder := docb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DistributorOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, docb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, docb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, docb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (docb *DistributorOrderCreateBulk) SaveX(ctx context.Context) []*DistributorOrder {
	v, err := docb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (docb *DistributorOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := docb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (docb *DistributorOrderCreateBulk) ExecX(ctx context.Context) {
	if err := docb.Exec(ctx); err != nil {
		panic(err)
	}
}
