// Code generated by ent, DO NOT EDIT.

package distributororder

import (
	"distributor/core/http/rpc/claim/ent/predicate"
	"distributor/core/http/rpc/claim/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldID, id))
}

// OrderId applies equality check predicate on the "orderId" field. It's identical to OrderIdEQ.
func OrderId(v uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldOrderId, v))
}

// BatchId applies equality check predicate on the "batchId" field. It's identical to BatchIdEQ.
func BatchId(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldBatchId, v))
}

// ProjectId applies equality check predicate on the "projectId" field. It's identical to ProjectIdEQ.
func ProjectId(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldProjectId, v))
}

// Account applies equality check predicate on the "account" field. It's identical to AccountEQ.
func Account(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldAccount, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v *schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldAmount, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldIndex, v))
}

// CreateAt applies equality check predicate on the "createAt" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldCreateAt, v))
}

// PTaskId applies equality check predicate on the "pTaskId" field. It's identical to PTaskIdEQ.
func PTaskId(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldPTaskId, v))
}

// OrderIdEQ applies the EQ predicate on the "orderId" field.
func OrderIdEQ(v uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldOrderId, v))
}

// OrderIdNEQ applies the NEQ predicate on the "orderId" field.
func OrderIdNEQ(v uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldOrderId, v))
}

// OrderIdIn applies the In predicate on the "orderId" field.
func OrderIdIn(vs ...uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldOrderId, vs...))
}

// OrderIdNotIn applies the NotIn predicate on the "orderId" field.
func OrderIdNotIn(vs ...uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldOrderId, vs...))
}

// OrderIdGT applies the GT predicate on the "orderId" field.
func OrderIdGT(v uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldOrderId, v))
}

// OrderIdGTE applies the GTE predicate on the "orderId" field.
func OrderIdGTE(v uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldOrderId, v))
}

// OrderIdLT applies the LT predicate on the "orderId" field.
func OrderIdLT(v uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldOrderId, v))
}

// OrderIdLTE applies the LTE predicate on the "orderId" field.
func OrderIdLTE(v uint32) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldOrderId, v))
}

// BatchIdEQ applies the EQ predicate on the "batchId" field.
func BatchIdEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldBatchId, v))
}

// BatchIdNEQ applies the NEQ predicate on the "batchId" field.
func BatchIdNEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldBatchId, v))
}

// BatchIdIn applies the In predicate on the "batchId" field.
func BatchIdIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldBatchId, vs...))
}

// BatchIdNotIn applies the NotIn predicate on the "batchId" field.
func BatchIdNotIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldBatchId, vs...))
}

// BatchIdGT applies the GT predicate on the "batchId" field.
func BatchIdGT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldBatchId, v))
}

// BatchIdGTE applies the GTE predicate on the "batchId" field.
func BatchIdGTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldBatchId, v))
}

// BatchIdLT applies the LT predicate on the "batchId" field.
func BatchIdLT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldBatchId, v))
}

// BatchIdLTE applies the LTE predicate on the "batchId" field.
func BatchIdLTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldBatchId, v))
}

// BatchIdContains applies the Contains predicate on the "batchId" field.
func BatchIdContains(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContains(FieldBatchId, v))
}

// BatchIdHasPrefix applies the HasPrefix predicate on the "batchId" field.
func BatchIdHasPrefix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasPrefix(FieldBatchId, v))
}

// BatchIdHasSuffix applies the HasSuffix predicate on the "batchId" field.
func BatchIdHasSuffix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasSuffix(FieldBatchId, v))
}

// BatchIdEqualFold applies the EqualFold predicate on the "batchId" field.
func BatchIdEqualFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEqualFold(FieldBatchId, v))
}

// BatchIdContainsFold applies the ContainsFold predicate on the "batchId" field.
func BatchIdContainsFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContainsFold(FieldBatchId, v))
}

// ProjectIdEQ applies the EQ predicate on the "projectId" field.
func ProjectIdEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldProjectId, v))
}

// ProjectIdNEQ applies the NEQ predicate on the "projectId" field.
func ProjectIdNEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldProjectId, v))
}

// ProjectIdIn applies the In predicate on the "projectId" field.
func ProjectIdIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldProjectId, vs...))
}

// ProjectIdNotIn applies the NotIn predicate on the "projectId" field.
func ProjectIdNotIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldProjectId, vs...))
}

// ProjectIdGT applies the GT predicate on the "projectId" field.
func ProjectIdGT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldProjectId, v))
}

// ProjectIdGTE applies the GTE predicate on the "projectId" field.
func ProjectIdGTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldProjectId, v))
}

// ProjectIdLT applies the LT predicate on the "projectId" field.
func ProjectIdLT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldProjectId, v))
}

// ProjectIdLTE applies the LTE predicate on the "projectId" field.
func ProjectIdLTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldProjectId, v))
}

// ProjectIdContains applies the Contains predicate on the "projectId" field.
func ProjectIdContains(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContains(FieldProjectId, v))
}

// ProjectIdHasPrefix applies the HasPrefix predicate on the "projectId" field.
func ProjectIdHasPrefix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasPrefix(FieldProjectId, v))
}

// ProjectIdHasSuffix applies the HasSuffix predicate on the "projectId" field.
func ProjectIdHasSuffix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasSuffix(FieldProjectId, v))
}

// ProjectIdEqualFold applies the EqualFold predicate on the "projectId" field.
func ProjectIdEqualFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEqualFold(FieldProjectId, v))
}

// ProjectIdContainsFold applies the ContainsFold predicate on the "projectId" field.
func ProjectIdContainsFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContainsFold(FieldProjectId, v))
}

// AccountEQ applies the EQ predicate on the "account" field.
func AccountEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldAccount, v))
}

// AccountNEQ applies the NEQ predicate on the "account" field.
func AccountNEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldAccount, v))
}

// AccountIn applies the In predicate on the "account" field.
func AccountIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldAccount, vs...))
}

// AccountNotIn applies the NotIn predicate on the "account" field.
func AccountNotIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldAccount, vs...))
}

// AccountGT applies the GT predicate on the "account" field.
func AccountGT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldAccount, v))
}

// AccountGTE applies the GTE predicate on the "account" field.
func AccountGTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldAccount, v))
}

// AccountLT applies the LT predicate on the "account" field.
func AccountLT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldAccount, v))
}

// AccountLTE applies the LTE predicate on the "account" field.
func AccountLTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldAccount, v))
}

// AccountContains applies the Contains predicate on the "account" field.
func AccountContains(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContains(FieldAccount, v))
}

// AccountHasPrefix applies the HasPrefix predicate on the "account" field.
func AccountHasPrefix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasPrefix(FieldAccount, v))
}

// AccountHasSuffix applies the HasSuffix predicate on the "account" field.
func AccountHasSuffix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasSuffix(FieldAccount, v))
}

// AccountEqualFold applies the EqualFold predicate on the "account" field.
func AccountEqualFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEqualFold(FieldAccount, v))
}

// AccountContainsFold applies the ContainsFold predicate on the "account" field.
func AccountContainsFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContainsFold(FieldAccount, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v *schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v *schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...*schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...*schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v *schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v *schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v *schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v *schema.BigInt) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldAmount, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldIndex, v))
}

// CreateAtEQ applies the EQ predicate on the "createAt" field.
func CreateAtEQ(v time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "createAt" field.
func CreateAtNEQ(v time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "createAt" field.
func CreateAtIn(vs ...time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "createAt" field.
func CreateAtNotIn(vs ...time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "createAt" field.
func CreateAtGT(v time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "createAt" field.
func CreateAtGTE(v time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "createAt" field.
func CreateAtLT(v time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "createAt" field.
func CreateAtLTE(v time.Time) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldCreateAt, v))
}

// PTaskIdEQ applies the EQ predicate on the "pTaskId" field.
func PTaskIdEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEQ(FieldPTaskId, v))
}

// PTaskIdNEQ applies the NEQ predicate on the "pTaskId" field.
func PTaskIdNEQ(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNEQ(FieldPTaskId, v))
}

// PTaskIdIn applies the In predicate on the "pTaskId" field.
func PTaskIdIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldIn(FieldPTaskId, vs...))
}

// PTaskIdNotIn applies the NotIn predicate on the "pTaskId" field.
func PTaskIdNotIn(vs ...string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldNotIn(FieldPTaskId, vs...))
}

// PTaskIdGT applies the GT predicate on the "pTaskId" field.
func PTaskIdGT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGT(FieldPTaskId, v))
}

// PTaskIdGTE applies the GTE predicate on the "pTaskId" field.
func PTaskIdGTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldGTE(FieldPTaskId, v))
}

// PTaskIdLT applies the LT predicate on the "pTaskId" field.
func PTaskIdLT(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLT(FieldPTaskId, v))
}

// PTaskIdLTE applies the LTE predicate on the "pTaskId" field.
func PTaskIdLTE(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldLTE(FieldPTaskId, v))
}

// PTaskIdContains applies the Contains predicate on the "pTaskId" field.
func PTaskIdContains(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContains(FieldPTaskId, v))
}

// PTaskIdHasPrefix applies the HasPrefix predicate on the "pTaskId" field.
func PTaskIdHasPrefix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasPrefix(FieldPTaskId, v))
}

// PTaskIdHasSuffix applies the HasSuffix predicate on the "pTaskId" field.
func PTaskIdHasSuffix(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldHasSuffix(FieldPTaskId, v))
}

// PTaskIdEqualFold applies the EqualFold predicate on the "pTaskId" field.
func PTaskIdEqualFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldEqualFold(FieldPTaskId, v))
}

// PTaskIdContainsFold applies the ContainsFold predicate on the "pTaskId" field.
func PTaskIdContainsFold(v string) predicate.DistributorOrder {
	return predicate.DistributorOrder(sql.FieldContainsFold(FieldPTaskId, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DistributorOrder) predicate.DistributorOrder {
	return predicate.DistributorOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DistributorOrder) predicate.DistributorOrder {
	return predicate.DistributorOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DistributorOrder) predicate.DistributorOrder {
	return predicate.DistributorOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
