// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"distributor/core/http/rpc/claim/ent/distributororder"
	"distributor/core/http/rpc/claim/ent/predicate"
	"distributor/core/http/rpc/claim/ent/schema"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDistributorOrder = "DistributorOrder"
)

// DistributorOrderMutation represents an operation that mutates the DistributorOrder nodes in the graph.
type DistributorOrderMutation struct {
	config
	op            Op
	typ           string
	id            *int
	orderId       *uint32
	addorderId    *int32
	batchId       *string
	projectId     *string
	account       *string
	amount        **schema.BigInt
	index         *int
	addindex      *int
	createAt      *time.Time
	pTaskId       *string
	proof         *[]string
	appendproof   []string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DistributorOrder, error)
	predicates    []predicate.DistributorOrder
}

var _ ent.Mutation = (*DistributorOrderMutation)(nil)

// distributororderOption allows management of the mutation configuration using functional options.
type distributororderOption func(*DistributorOrderMutation)

// newDistributorOrderMutation creates new mutation for the DistributorOrder entity.
func newDistributorOrderMutation(c config, op Op, opts ...distributororderOption) *DistributorOrderMutation {
	m := &DistributorOrderMutation{
		config:        c,
		op:            op,
		typ:           TypeDistributorOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDistributorOrderID sets the ID field of the mutation.
func withDistributorOrderID(id int) distributororderOption {
	return func(m *DistributorOrderMutation) {
		var (
			err   error
			once  sync.Once
			value *DistributorOrder
		)
		m.oldValue = func(ctx context.Context) (*DistributorOrder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DistributorOrder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDistributorOrder sets the old DistributorOrder of the mutation.
func withDistributorOrder(node *DistributorOrder) distributororderOption {
	return func(m *DistributorOrderMutation) {
		m.oldValue = func(context.Context) (*DistributorOrder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DistributorOrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DistributorOrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DistributorOrderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DistributorOrderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DistributorOrder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrderId sets the "orderId" field.
func (m *DistributorOrderMutation) SetOrderId(u uint32) {
	m.orderId = &u
	m.addorderId = nil
}

// OrderId returns the value of the "orderId" field in the mutation.
func (m *DistributorOrderMutation) OrderId() (r uint32, exists bool) {
	v := m.orderId
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderId returns the old "orderId" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldOrderId(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderId: %w", err)
	}
	return oldValue.OrderId, nil
}

// AddOrderId adds u to the "orderId" field.
func (m *DistributorOrderMutation) AddOrderId(u int32) {
	if m.addorderId != nil {
		*m.addorderId += u
	} else {
		m.addorderId = &u
	}
}

// AddedOrderId returns the value that was added to the "orderId" field in this mutation.
func (m *DistributorOrderMutation) AddedOrderId() (r int32, exists bool) {
	v := m.addorderId
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderId resets all changes to the "orderId" field.
func (m *DistributorOrderMutation) ResetOrderId() {
	m.orderId = nil
	m.addorderId = nil
}

// SetBatchId sets the "batchId" field.
func (m *DistributorOrderMutation) SetBatchId(s string) {
	m.batchId = &s
}

// BatchId returns the value of the "batchId" field in the mutation.
func (m *DistributorOrderMutation) BatchId() (r string, exists bool) {
	v := m.batchId
	if v == nil {
		return
	}
	return *v, true
}

// OldBatchId returns the old "batchId" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldBatchId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatchId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatchId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatchId: %w", err)
	}
	return oldValue.BatchId, nil
}

// ResetBatchId resets all changes to the "batchId" field.
func (m *DistributorOrderMutation) ResetBatchId() {
	m.batchId = nil
}

// SetProjectId sets the "projectId" field.
func (m *DistributorOrderMutation) SetProjectId(s string) {
	m.projectId = &s
}

// ProjectId returns the value of the "projectId" field in the mutation.
func (m *DistributorOrderMutation) ProjectId() (r string, exists bool) {
	v := m.projectId
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectId returns the old "projectId" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldProjectId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectId: %w", err)
	}
	return oldValue.ProjectId, nil
}

// ResetProjectId resets all changes to the "projectId" field.
func (m *DistributorOrderMutation) ResetProjectId() {
	m.projectId = nil
}

// SetAccount sets the "account" field.
func (m *DistributorOrderMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *DistributorOrderMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *DistributorOrderMutation) ResetAccount() {
	m.account = nil
}

// SetAmount sets the "amount" field.
func (m *DistributorOrderMutation) SetAmount(si *schema.BigInt) {
	m.amount = &si
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DistributorOrderMutation) Amount() (r *schema.BigInt, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldAmount(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *DistributorOrderMutation) ResetAmount() {
	m.amount = nil
}

// SetIndex sets the "index" field.
func (m *DistributorOrderMutation) SetIndex(i int) {
	m.index = &i
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *DistributorOrderMutation) Index() (r int, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds i to the "index" field.
func (m *DistributorOrderMutation) AddIndex(i int) {
	if m.addindex != nil {
		*m.addindex += i
	} else {
		m.addindex = &i
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *DistributorOrderMutation) AddedIndex() (r int, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *DistributorOrderMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// SetCreateAt sets the "createAt" field.
func (m *DistributorOrderMutation) SetCreateAt(t time.Time) {
	m.createAt = &t
}

// CreateAt returns the value of the "createAt" field in the mutation.
func (m *DistributorOrderMutation) CreateAt() (r time.Time, exists bool) {
	v := m.createAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "createAt" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "createAt" field.
func (m *DistributorOrderMutation) ResetCreateAt() {
	m.createAt = nil
}

// SetPTaskId sets the "pTaskId" field.
func (m *DistributorOrderMutation) SetPTaskId(s string) {
	m.pTaskId = &s
}

// PTaskId returns the value of the "pTaskId" field in the mutation.
func (m *DistributorOrderMutation) PTaskId() (r string, exists bool) {
	v := m.pTaskId
	if v == nil {
		return
	}
	return *v, true
}

// OldPTaskId returns the old "pTaskId" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldPTaskId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPTaskId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPTaskId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPTaskId: %w", err)
	}
	return oldValue.PTaskId, nil
}

// ResetPTaskId resets all changes to the "pTaskId" field.
func (m *DistributorOrderMutation) ResetPTaskId() {
	m.pTaskId = nil
}

// SetProof sets the "proof" field.
func (m *DistributorOrderMutation) SetProof(s []string) {
	m.proof = &s
	m.appendproof = nil
}

// Proof returns the value of the "proof" field in the mutation.
func (m *DistributorOrderMutation) Proof() (r []string, exists bool) {
	v := m.proof
	if v == nil {
		return
	}
	return *v, true
}

// OldProof returns the old "proof" field's value of the DistributorOrder entity.
// If the DistributorOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DistributorOrderMutation) OldProof(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProof is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProof requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProof: %w", err)
	}
	return oldValue.Proof, nil
}

// AppendProof adds s to the "proof" field.
func (m *DistributorOrderMutation) AppendProof(s []string) {
	m.appendproof = append(m.appendproof, s...)
}

// AppendedProof returns the list of values that were appended to the "proof" field in this mutation.
func (m *DistributorOrderMutation) AppendedProof() ([]string, bool) {
	if len(m.appendproof) == 0 {
		return nil, false
	}
	return m.appendproof, true
}

// ResetProof resets all changes to the "proof" field.
func (m *DistributorOrderMutation) ResetProof() {
	m.proof = nil
	m.appendproof = nil
}

// Where appends a list predicates to the DistributorOrderMutation builder.
func (m *DistributorOrderMutation) Where(ps ...predicate.DistributorOrder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DistributorOrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DistributorOrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DistributorOrder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DistributorOrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DistributorOrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DistributorOrder).
func (m *DistributorOrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DistributorOrderMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.orderId != nil {
		fields = append(fields, distributororder.FieldOrderId)
	}
	if m.batchId != nil {
		fields = append(fields, distributororder.FieldBatchId)
	}
	if m.projectId != nil {
		fields = append(fields, distributororder.FieldProjectId)
	}
	if m.account != nil {
		fields = append(fields, distributororder.FieldAccount)
	}
	if m.amount != nil {
		fields = append(fields, distributororder.FieldAmount)
	}
	if m.index != nil {
		fields = append(fields, distributororder.FieldIndex)
	}
	if m.createAt != nil {
		fields = append(fields, distributororder.FieldCreateAt)
	}
	if m.pTaskId != nil {
		fields = append(fields, distributororder.FieldPTaskId)
	}
	if m.proof != nil {
		fields = append(fields, distributororder.FieldProof)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DistributorOrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case distributororder.FieldOrderId:
		return m.OrderId()
	case distributororder.FieldBatchId:
		return m.BatchId()
	case distributororder.FieldProjectId:
		return m.ProjectId()
	case distributororder.FieldAccount:
		return m.Account()
	case distributororder.FieldAmount:
		return m.Amount()
	case distributororder.FieldIndex:
		return m.Index()
	case distributororder.FieldCreateAt:
		return m.CreateAt()
	case distributororder.FieldPTaskId:
		return m.PTaskId()
	case distributororder.FieldProof:
		return m.Proof()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DistributorOrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case distributororder.FieldOrderId:
		return m.OldOrderId(ctx)
	case distributororder.FieldBatchId:
		return m.OldBatchId(ctx)
	case distributororder.FieldProjectId:
		return m.OldProjectId(ctx)
	case distributororder.FieldAccount:
		return m.OldAccount(ctx)
	case distributororder.FieldAmount:
		return m.OldAmount(ctx)
	case distributororder.FieldIndex:
		return m.OldIndex(ctx)
	case distributororder.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case distributororder.FieldPTaskId:
		return m.OldPTaskId(ctx)
	case distributororder.FieldProof:
		return m.OldProof(ctx)
	}
	return nil, fmt.Errorf("unknown DistributorOrder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DistributorOrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case distributororder.FieldOrderId:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderId(v)
		return nil
	case distributororder.FieldBatchId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatchId(v)
		return nil
	case distributororder.FieldProjectId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectId(v)
		return nil
	case distributororder.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case distributororder.FieldAmount:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case distributororder.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	case distributororder.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case distributororder.FieldPTaskId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPTaskId(v)
		return nil
	case distributororder.FieldProof:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProof(v)
		return nil
	}
	return fmt.Errorf("unknown DistributorOrder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DistributorOrderMutation) AddedFields() []string {
	var fields []string
	if m.addorderId != nil {
		fields = append(fields, distributororder.FieldOrderId)
	}
	if m.addindex != nil {
		fields = append(fields, distributororder.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DistributorOrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case distributororder.FieldOrderId:
		return m.AddedOrderId()
	case distributororder.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DistributorOrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case distributororder.FieldOrderId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderId(v)
		return nil
	case distributororder.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown DistributorOrder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DistributorOrderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DistributorOrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DistributorOrderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DistributorOrder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DistributorOrderMutation) ResetField(name string) error {
	switch name {
	case distributororder.FieldOrderId:
		m.ResetOrderId()
		return nil
	case distributororder.FieldBatchId:
		m.ResetBatchId()
		return nil
	case distributororder.FieldProjectId:
		m.ResetProjectId()
		return nil
	case distributororder.FieldAccount:
		m.ResetAccount()
		return nil
	case distributororder.FieldAmount:
		m.ResetAmount()
		return nil
	case distributororder.FieldIndex:
		m.ResetIndex()
		return nil
	case distributororder.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case distributororder.FieldPTaskId:
		m.ResetPTaskId()
		return nil
	case distributororder.FieldProof:
		m.ResetProof()
		return nil
	}
	return fmt.Errorf("unknown DistributorOrder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DistributorOrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DistributorOrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DistributorOrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DistributorOrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DistributorOrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DistributorOrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DistributorOrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DistributorOrder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DistributorOrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DistributorOrder edge %s", name)
}
