// Code generated by ent, DO NOT EDIT.

package ent

import (
	"distributor/core/http/rpc/claim/ent/distributororder"
	"distributor/core/http/rpc/claim/ent/schema"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DistributorOrder is the model entity for the DistributorOrder schema.
type DistributorOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrderId holds the value of the "orderId" field.
	OrderId uint32 `json:"orderId,omitempty"`
	// BatchId holds the value of the "batchId" field.
	BatchId string `json:"batchId,omitempty"`
	// ProjectId holds the value of the "projectId" field.
	ProjectId string `json:"projectId,omitempty"`
	// Account holds the value of the "account" field.
	Account string `json:"account,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount *schema.BigInt `json:"amount,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// CreateAt holds the value of the "createAt" field.
	CreateAt time.Time `json:"createAt,omitempty"`
	// PTaskId holds the value of the "pTaskId" field.
	PTaskId string `json:"pTaskId,omitempty"`
	// Proof holds the value of the "proof" field.
	Proof        []string `json:"proof,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DistributorOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case distributororder.FieldProof:
			values[i] = new([]byte)
		case distributororder.FieldAmount:
			values[i] = new(schema.BigInt)
		case distributororder.FieldID, distributororder.FieldOrderId, distributororder.FieldIndex:
			values[i] = new(sql.NullInt64)
		case distributororder.FieldBatchId, distributororder.FieldProjectId, distributororder.FieldAccount, distributororder.FieldPTaskId:
			values[i] = new(sql.NullString)
		case distributororder.FieldCreateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DistributorOrder fields.
func (do *DistributorOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case distributororder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			do.ID = int(value.Int64)
		case distributororder.FieldOrderId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field orderId", values[i])
			} else if value.Valid {
				do.OrderId = uint32(value.Int64)
			}
		case distributororder.FieldBatchId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field batchId", values[i])
			} else if value.Valid {
				do.BatchId = value.String
			}
		case distributororder.FieldProjectId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field projectId", values[i])
			} else if value.Valid {
				do.ProjectId = value.String
			}
		case distributororder.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				do.Account = value.String
			}
		case distributororder.FieldAmount:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				do.Amount = value
			}
		case distributororder.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				do.Index = int(value.Int64)
			}
		case distributororder.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createAt", values[i])
			} else if value.Valid {
				do.CreateAt = value.Time
			}
		case distributororder.FieldPTaskId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pTaskId", values[i])
			} else if value.Valid {
				do.PTaskId = value.String
			}
		case distributororder.FieldProof:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field proof", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &do.Proof); err != nil {
					return fmt.Errorf("unmarshal field proof: %w", err)
				}
			}
		default:
			do.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DistributorOrder.
// This includes values selected through modifiers, order, etc.
func (do *DistributorOrder) Value(name string) (ent.Value, error) {
	return do.selectValues.Get(name)
}

// Update returns a builder for updating this DistributorOrder.
// Note that you need to call DistributorOrder.Unwrap() before calling this method if this DistributorOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (do *DistributorOrder) Update() *DistributorOrderUpdateOne {
	return NewDistributorOrderClient(do.config).UpdateOne(do)
}

// Unwrap unwraps the DistributorOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (do *DistributorOrder) Unwrap() *DistributorOrder {
	_tx, ok := do.config.driver.(*txDriver)
	if !ok {
		panic("ent: DistributorOrder is not a transactional entity")
	}
	do.config.driver = _tx.drv
	return do
}

// String implements the fmt.Stringer.
func (do *DistributorOrder) String() string {
	var builder strings.Builder
	builder.WriteString("DistributorOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", do.ID))
	builder.WriteString("orderId=")
	builder.WriteString(fmt.Sprintf("%v", do.OrderId))
	builder.WriteString(", ")
	builder.WriteString("batchId=")
	builder.WriteString(do.BatchId)
	builder.WriteString(", ")
	builder.WriteString("projectId=")
	builder.WriteString(do.ProjectId)
	builder.WriteString(", ")
	builder.WriteString("account=")
	builder.WriteString(do.Account)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", do.Amount))
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", do.Index))
	builder.WriteString(", ")
	builder.WriteString("createAt=")
	builder.WriteString(do.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pTaskId=")
	builder.WriteString(do.PTaskId)
	builder.WriteString(", ")
	builder.WriteString("proof=")
	builder.WriteString(fmt.Sprintf("%v", do.Proof))
	builder.WriteByte(')')
	return builder.String()
}

// DistributorOrders is a parsable slice of DistributorOrder.
type DistributorOrders []*DistributorOrder
